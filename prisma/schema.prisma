generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserRole {
  ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  SUSPEND
  RESTRICTED
  INACTIVE
}

enum SubscriptionStatus {
  CANCELED
  ACTIVE
  NULL
}

model Users {
  id            String       @id @default(cuid())
  email         String       @unique
  name          String
  password      String
  avatar        String       @default("avatar.png")
  isEmailVerify Boolean      @default(false) @map(name: "is_email_verify")
  emailVerifyAt DateTime?    @map("email_verify_at")
  role          UserRole     @default(USER)
  createdAt     DateTime     @default(now()) @map(name: "created_at")
  updatedAt     DateTime     @updatedAt @map(name: "updated_at")
  status        UserStatus   @default(ACTIVE)
  userSetting   UserSettings @relation(fields: [userSettingId], references: [id])

  File           Files[]
  Message        Messages[]
  ForgotPassword ForgotPasswords[]

  stripeCustomerId       String?             @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?             @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?             @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime?           @map(name: "stripe_current_period_end")
  subscriptionStatus     SubscriptionStatus? @default(NULL) @map(name: "subscription_status")
  userSettingId          String              @map("user_setting_id")

  @@index([userSettingId])
}

enum PasswordChangeReason {
  FORGOT
  CHANGE
}

enum PasswordChangeStatus {
  PENDING
  SUCCESS
  FAILED
}

model ForgotPasswords {
  id        String               @id @default(cuid())
  user      Users                @relation(fields: [userId], references: [id], onDelete: Cascade)
  email     String
  reason    PasswordChangeReason @default(FORGOT)
  status    PasswordChangeStatus @default(PENDING)
  token     String?
  messageId String?              @map("message_id")
  createdAt DateTime             @default(now()) @map("created_at")
  updatedAt DateTime             @updatedAt @map("updated_at")
  userId    String               @map("user_id")

  @@index([userId])
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

enum FileType {
  CSV
  JSON
}

model Files {
  id           String       @id @default(cuid())
  name         String
  uploadStatus UploadStatus @default(PENDING) @map("upload_status")
  url          String
  key          String
  path         String
  fileType     FileType     @map("file_type")
  texts        String?      @db.Text()
  csvFileSize  String?      @map("csv_file_size")
  csvRowCount  Int?         @map("csv_row_count")
  messages     Messages[]
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  User         Users?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?      @map("user_id")

  @@index([userId])
}

model Messages {
  id            String   @id @default(cuid())
  text          String   @db.Text()
  isUserMessage Boolean  @map("is_user_message")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  User   Users?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @map("user_id")
  File   Files?  @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId String? @map("file_id")

  @@index([userId])
  @@index([fileId])
}

model UserSettings {
  id                      String   @id @default(cuid())
  documentUploadQuoteUsed Int      @default(0) @map("document_upload_quote_used")
  csvQuoteUsed            Int      @default(0) @map("csv_quote_used")
  jsonQuoteUsed           Int      @default(0) @map("json_quote_used")
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")
  User                    Users[]
}
